print('hello')

#I will keep this file to update with a new file of pandas zero to hero 

import numpy as np
import pandas as pd 



frame = pd.read_csv('screentime_analysis.csv')

print(frame.head()) #head is first 5 rows of the data frame while tail is the last 5

print(frame.shape) #shape tells us the number of rows and columns in a data frame
print(frame.index) #index tells us the range of the index (numpy)

df = pd.DataFrame({'Name': ['Alice', 'Bob', 'Aritra'],'Age': [25, 30, 35],'Location': ['Seattle', 'New York', 'Kona']},index=([10, 20, 30]))
print(df.index) #index tells us the rows or columns in a data frame (and it uses labels to do so)

#So first thing is first is two different .index. The numpy one uses numbers, while pandas uses labels
#The index is pandas stores metadata (such as the data type which is how we know which one we are dealing with)

#one can make their own data frame via .df 

test_scores = pd.DataFrame({'Student_ID': [154, 973, 645], 'Science': [50, 75, 31], 'Geography': [88, 100, 66],'Math': [72, 86, 94]})

#where we wrao the whoke thing in a parens and a curly bracket
#if we print this we can see how our data frames are indexed

print(test_scores.columns)  #we can see the index via .index or .columns 

test_scores = test_scores.set_index('Student_ID') #We can use a set index to essentially rename the name of our index 

print(test_scores)

#We can also rename column names with .rename -> and then the columns 

test_scores.rename(columns={'Science':'Virgil'},inplace=True) #where we inplace to make the change permanent
#and we do : to rename the column

#I am also aware of the drop function, where we can drop columns or rows (where if we renamed an index column we could then drop that too)

test_scores.drop(columns=['Virgil'],inplace=True) #or we can drop the rows with the same kind of argument essentially

#We can also add columns with the same thinking but we have to note that if we do this the column and rows that come with it have to be of the same size 

#That Comes in the way of calling the dataframe and the new column you wish to make and then assigning values 

test_scores['Surf'] = [500,400,300]

#everything up to this point has been a dataframe

#Pandas is good for two things, one is dataframes the other is series 

#A series is one dimensional and a dataframe is two dimensional 
#Series:  Is like a list, but it has the index labels that we would normally see (so think n,)
#Dataframe: is a dictionary but it has index labels where each column is a series 

Surf = pd.Series(['roll','uzi'], index = [100,200])

#This is a series, which once we make a dataframe we will see it is just series added on top of each other 

Ecstacy = pd.DataFrame([[500,'pure','test'], [600, 'fure','rest'], [700, 'sure','best']],columns=['Young','coke','crack'])

print(Surf)
print(Ecstacy)

#Loc vs Iloc

#Loc is label based (so think text) while Iloc is posiiton based (so think numbers)
#Loc and Iloc are specific to pandas, and meant to navigate dataframes/series it is not meant for dictionaires or lists because those are not native to the library

#If we want to slice a normal list or dictionary that we made in python we would slide them as we normally one using any combination of start/stop/step

#loc and iloc only in pandas
sheet_spread = pd.read_csv('global_tech_salary.txt')
#print(sheet_spread.head())

#in a dataframe we can select a column either by doing the name of the dataframe followed by ['text']

#The idea is to do ['text'] or .text

print(sheet_spread['company_location'])
print(sheet_spread.company_location)

#both do the same thing but [] is more robust and can handle more cases

#Onto loc and iloc 
#Iloc (position or integer based location) takes two arguments, the first being the row and the second being the column

sheet_spread.iloc[0, :] #this is first row (since its indexed at 0) and all columns 
sheet_spread.iloc[0,0] #first row, first column
sheet_spread.iloc[[0,2], :] #first and third row, and then all columns 
sheet_spread.iloc[-1,0] #last row, first column
sheet_spread.iloc[0:2, 1:3] #first and second row, second and third column 

#These are most example of iloc but one you get stuck just remember rows to columns with paranthesis separating the two and : to either pull all of something or to extend

#Loc 
#loc is the same thing (rows and columns), but label based so if we knew the names of our label we could use that instead of the numeric 

#so good idea to list out the columns to get an idea of the names to pull for

print(sheet_spread.columns)

sheet_spread.loc[0, 'work_year'] #first row of the work year column
sheet_spread.loc[1:3, ['work_year','employment_type', 'job_title']] #first to third row of the respective columns 

#Important to note that when slicing in loc vs iloc, loc will include the start and end values, while iloc will not include the last sliced value

#Not only can we do this we can also do condition based formatting, think along the lines of a matches formula in excel for example 

print(sheet_spread.loc[sheet_spread['company_location'] == 'AU', 'company_name']) #This here returns all the line items with that classification

#We can do multiple conditionals with the & symbol so taking this once again

#print(sheet_spread.loc[(sheet_spread['company_location'] == 'AU') & (sheet_spread['work_year'] == 2023), 1])
#the above code returns company names in AU and with a work year of 2023

#The or operator is | and the not operator is ~
#Chaining the or operation is an idea of IN ==, but here we use the  .isin() function

sheet_spread.loc[sheet_spread['company_size'].isin(['small','medium']), 'company_name']

#We also have the .isnull and .notnull functions to check for missing values which we would do in the same breath

sheet_spread.loc[sheet_spread['employee_residence'].isnull(), :]

#For this code specifically there are too many indexers so we can either keep playing with isnull or just fix the names 
#either way the idea is the same on what/how to use these functions 
