#This will be work file pandas that I made at work using BQNT, basically all notes that I make without my macbook 

#I was thinking about some excel to dataframe uscases such as df.to_csv

#Section on insepcting an Array -> given that we have some variables set for thesee arrays, the important thing here will be that the len, ndim, shape basically all things following the website will be what we are trying to do 
#whether that be find the length, array dimensions, elements or something else 


#Basics on Inspecting the array (examples to come)

d.shape
len(d)  #length of an array 
b.ndim #number of array dimensions 
e.size #number of array elements 
b.dtype #type of data type 
b.dtype.name #name of data type
b.astype(int) #how we can change the array to a different type 


#Different Data types -> For these since there are no variables set to them just like that we will come up with examples for these


np.int64 #signed 64 bit integer type (64 bits wide)
np.float32 #standard double precision float 
np.complex #complex numbers represented by 128 floats where a complex number we know as an imaginary number added to a constant 
np.bool #true or false values string (storing those values)
np.object #pythons object type
np.string #Fixed length string type 
np.unicode #Fixed length Unicode type 

#Sorting an Array

a.sort() #One of the ways we sort an array 
c.sort(axis=0) #sort the elements of an array's axis 

#Subsetting

a[2] #just selects the element at the second index (index values start at 0, so an index of 2 is 0,1,2, where the 2nd index is 2)
b[1,2] #Element at row 1 and column 2 

#Slicing 

a[1:2] #selects item at 1 and 2 
b[]

#Example 1: Write a Numpy program to get the Numpy version and show the Numpy build configuration.

import numpy as np 

#print(np.__version__)

#print(np.show_config())

#Write a NumPy program to test whether none of the elements of a given array are zero. 

dorian = np.array([1,2,3,5,6])
xin = np.array([1,2,0,5,6])
#print("Original array is:")
#print(dorian)

#print(np.all(dorian)) #prints a true (if none are zero, if at least one is zero prints a false)
#print(np.all(xin))

#Write a NumPy program to test elements-wise for positive or negative infinity.

dorian2 = np.array([1,-1, np.inf, -np.inf, 3, 6])
positive_infinity = np.isposinf(dorian)
negative_infinity = np.isposinf(dorian)

#print(positive_infinity, negative_infinity)

dorian3 = np.array([1, 1+2j, 1+3j, 4])
print(np.iscomplex(dorian))

Dorian4 = np.array([(1.3, 2.3, 4), (5, 7, 8), (9,0,9)], dtype = float)
Dorian5 = np.zeros([3,3])
dorian6 = np.identity(3) #identity matrix (thought I noted it )

#print(Dorian5)
#print(dorian6)

#Write a NumPy program to add, subtract, multiply, divide arguments element-wise. 

#When we do this arithmetic we use commas instead of the actual sign 
#Expected Output:
#Add:
#5.0
#Subtract:
#-3.0
#Multiply:
#4.0
#Divide:
#0.25

bin = np.add(1,4) #this only takes two arguments for more array specific addition, you can do np.sum
cin = np.subtract(4,7)
din = np.multiply(2,2)
pin = np.divide(1,4)

print(bin, cin, din, pin)

#Write a NumPy program to compute logarithm of the sum of exponentiations of the inputs, sum of exponentiations of the inputs in base-2.
#Expected Output:
#Logarithm of the sum of exponentiations:
#-113.876491681
#Logarithm of the sum of exponentiations of the inputs in base-2:
#-113.599555228

stin = np.log(19)
brin = np.log(21)
frin = np.logaddexp(stin, brin) #logaddexp takes two arguments

print(frin)

#Write a NumPy program to get true division of the element-wise array inputs.
#Expected Output:
#Original array:
#[0 1 2 3 4 5 6 7 8 9]
#Division of the array inputs, element-wise:
#[ 0. 0.33333333 0.66666667 1. 1.33333333 1.6666666
#7 2. 2.33333333 2.66666667 3. ]

Original_array = np.arange(10)  #Arange is just literally A range (of numbers up to a number (not including the specified end number)
original_next = np.arange(1,10,2) #start stop step
print(original_next)
second_array = np.array([0,3,3,3,3,3,3,3,3,3])
Divided_array = np.true_divide(Original_array,3)
print(Original_array)
print(Divided_array)

#rite a NumPy program to calculate the absolute value element-wise.
#Smple output:
#Original array:
#  10.2 122.2 0.2]
#Element-wise abosulate value:
#10.2 122.2 0.2

original = np.array([-1,-1,-2])
meast = np.absolute(original)
print(meast)

#Hard Numpy promblems that may be applicable (base problems)

#Write a NumPy program that creates a structured array with fields for 'name' (string), 'age' (integer), and 'height' (float). Populate it with sample data for five individuals.
# Define the data type for the structured array
dtype = [('name', 'U12'), ('age', 'i4'), ('height', 'f4')]
#You may be wondering how we got to the stage of U10, etc, but basically those are the data types
#So U -> Unsigned Integer U12 here assigns 12 value spots to that name 
#I -> Integer
#F -> Float 
#s -> String 
# Create the structured array with sample data
structured_array = np.array([
    ('Lehi Piero', 25, 5.5),
    ('Albin Achan', 30, 5.8),
    ('Zerach Hava', 35, 6.1),
    ('Edmund Tereza', 40, 5.9),
    ('Laura Felinus', 28, 5.7)
], dtype=dtype)

# Print the structured array
#print("Structured Array:")
#print(structured_array)



#Write a NumPy program that accesses and prints all values of the 'Name' field from the structured array created in exercise.

for name in structured_array['name']:
    print(name)

#we use a for loop to iterate over the names and then only print the names 

structured_array[0]['name'] = 30 #this will change the first index (ALbin to 30 all across the board, if we want to specify a field we use 'name' in brackets ), we change this for more than with something like [1:2]
#print(structured_array)

#Write a NumPy program that updates the 'age' field for the first individual in the structured array created in exercise 1 to 30.

structured_array[0]['age'] = 30
#print(structured_array)


#Write a NumPy program that adds a new record to the structured array created array with fields for 'name' (string), 'age' (integer), and 'height' (float) with the fields: 'name': ' Nela Suna ', 'age': 25, 'height': 5.9.

#essentially add a new record to this

new_structured_array = np.array([('Dorian Reece', 11, 5.3)], dtype=dtype)
final_structured_array = np.append(structured_array, new_structured_array)
print(final_structured_array)
#Write a NumPy program that sorts the structured array created with fields for 'name' (string), 'age' (integer), and 'height' (float), by the 'height' field in ascending order and prints the sorted array.

#Essentially sort the values in ascending order 

order = np.sort(final_structured_array, order = 'height') #You can specificy the order with string values
print('New order:') 
print(order)

print("Original Structured Array:")
print(structured_array)

# Define the new record to be added
new_record = np.array([('Nela Suna', 25, 5.9)], dtype=dtype)

# Add the new record to the structured array
# Use np.append to concatenate the new record to the existing array
updated_array = np.append(structured_array, new_record)

# Print the updated structured array
print("\nUpdated Structured Array:")
print(updated_array)

x = np.random.random((5,3))

# Displaying the first array

# Generating another random array of shape (3, 2)
y = np.random.random((3,2))

# Displaying the second array

# Computing the dot product of the two arrays
z = np.dot(x, y)

# Displaying the dot product of the arrays
print("Dot product of two arrays:")
print(z) 

first = np.random.random((5,3))

second = np.random.random((3,2))

dude = np.dot(first, second) #the matrix y and x need to match (those respective values otherwise it will not be aligned )
print(dude)

#Write a NumPy program to filter and print all records where the 'age' field is greater than 25 from the structured array created with fields for 'name' (string), 'age' (integer), and 'height' (float).

new_filtered_array = structured_array['age']>25
print(new_filtered_array)

#Difference between random and randint -> random.rand makes a series of floating numbers (0 to 1) while random.randint is a series of integers within a specified range
#Random.rand is like np.random.rand(2,3) -> a 2 by 3 with 0 to 1 values and random.randint is like np.random.randint(10,20) -> the randomness does not exceed 20 (low,high) where high is not included
#random.randint also has an optionali size parameter -> random.randint(10,20, size = 30) for example

#Write a NumPy program to calculate and print the average age of individuals in the structured array created with fields for 'name' (string), 'age' (integer), and 'height' (float).

averaged_structured_array = np.average(structured_array['age'])
print(averaged_structured_array)
