#This will be only Numpy problems and their relevant source code 
#Based on this link -> https://codesolid.com/numpy-practice-questions-to-make-you-an-expert/


 #Using a NumPy function, how would you create a one-dimensional NumPy array of the numbers from 10 to 100, counting by 10? (as a bonus how would I make this 2d?)

import numpy as np 
from string import ascii_uppercase

blue = np.arange(10,110,10)
print(blue)

#we reshape this by using np.reshape

blue_new_shape = blue.reshape(2,5)

#How could you create the same NumPy array using a Python range and a list

for i in range(20):
    print('testing')

np.array([i for i in range(10, 110, 10)])

#no need to print this, but we can wrap a for loop in our array it seems without arange

#What happens if you pass no arguments to the np.array()? -> we get a type error saying we need an argument 
 
#How might you create a NumPy array of the capital letters, A-Z

#We can either list out the different letters or do it the botttom way 

np.array(chr(i) for i in range(ord('A'), ord('z'))) #This shows we can loop this again for a range between A to Z 
np.array(list(ascii_uppercase)) #we need this ascii_uppercase since we are transferring over datatypes

#How would you create a ten-element NumPy array object of all zeros

#np.zeros((10))
#np.zeros((1,10))

print('bin')
#print(bin.dtype)

#Really for when we ased for the data type of the capial letters how would we find/know the data type for that problem?

np.array(chr(i) for i in range(ord('A'), ord('z'))) #This shows we can loop this again for a range between A to Z 
np.array(list(ascii_uppercase))

#bin.dtype or if df = np.zeros(10) and then df.dtype

#What function would return the same number of elements, but of all ones

np.ones((20))

#How could you create a ten-element array of random integers between 1 and 5 (inclusive)

bin = np.random.randint(1,6,10) #random and then randint for generation
print(bin)

#How can you create a normal distribution of 10 numbers, centered on 5

#Standard Deviation I think 

bins = np.random.normal(5,1,10) #random.normal is a random number drawn from a NORMAL distrubituion 

print(bins)
nbins = np.std(bins)

print(nbins)

#What code would create an array of 10 random numbers between zero and one

stins = np.random.rand(3,3) #random.rand makes random numbers between 0 and 1, either 

print(stins)

np.ones((3,5)) #does what? It makes 3 arrays each with 5 elements (ones in it)

myarray = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]])
print(myarray)
#myarray[1,1] #the counting starts at 0, so 1 means the 2nd row, and 3 means 8 b/c 0,1,2,3 means 5,6,7,8
myarray.ndim #counts the number of dimensions (2 brackets seem to be two dimensions)

newarray = np.array([[[1,2], [3,4]], [[5,6], [7,8]]])
print(newarray)
newarray.ndim   #what defines the number of dimensions?
#the number of dimensions are as follows: 
#0d array is a single value with no dimension like np.array(5)
#1d Array (vector) is a sequence of values in a single row like np.array([1,2,3])
#2d Array (Matrix) A table of values with rows and columns 
#3D array: A stack of 2D arrays (Matrix) like a cube or a list of tables 

reshape_array = myarray.reshape(8,2) #remember we can make changes to our array via something.function()
print(reshape_array)

original_array = np.arange(1, 13)
new_array = original_array.reshape(3, 4)
print(repr(new_array))

x = new_array
x[0,0] = 42 #changes the first section of the array to 42
print (x[0,0]) #prints the first entry 
print(new_array[0,0]) #prints the first entry in the new array 

z_list = [z for z in range(0,5)]
y_list = [z_list for y in range(0,4)]
x_list = [y_list for x in range(0,3)]

x_array = np.array(x_list)
x_array.shape #Just prints a 1D array (all these iterations are within a for loop one by one)

#Indexing and Slicing Two-Dimensional Arrays

# four_by_five:

stinny = np.array([[ 1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10],
       [11, 12, 13, 14, 15],
       [16, 17, 18, 19, 20]])

#print the first column
print(stinny[0])
#print the last column
print(stinny[3])
print(stinny[-1])
print(stinny[2:3]) #prints the indexed second and third row
print(stinny[2,3]) #prints second row third indexed value 
#Print the first column (1,6,11,16)
print(stinny[0:4,0]) #or
print(stinny[:,0])
print(stinny[:,3]) #prints the 3rd indexed column all the way down 
print(stinny[:,3:])  #prints the 3rd indexed column (and the values directly next to it, and then all the way down)

#Vectorized Operations
#We use vectorized operations to perform mathematical and logical functions on an array
one_dim = np.arange(1,6)
print(one_dim)
#print(one_dim*2) #random numbers in the 1 by 6 multiplied by2 
new_one_dim = one_dim + np.arange(5, 0, -1) #arange is not random 
old_one_dim = np.arange(5,0,-1)
print(old_one_dim)
print(new_one_dim)
print(one_dim-one_dim) #obviously arrays of the same size subtracted equals 00
print(one_dim>2) #Just a T/F Condition based on the values 
print((one_dim > 4) | (one_dim == 1)) #Logical operators in numpy are not "AND" or "OR" instead they are represnted by | and &
#THis basically says print T/F when one_dim is greater than 4 or equal to 1 
print(-one_dim)
